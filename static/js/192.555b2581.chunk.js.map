{"version":3,"file":"static/js/192.555b2581.chunk.js","mappings":"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","sources":["utils/api/getMovieCredits.js","components/Cast/Cast.styled.js","components/CastItem/CastItem.styled.js","components/CastItem/CastItem.js","components/Cast/Cast.jsx","components/Message/Message.styled.js","components/Message/Message.jsx","utils/getMessageType.js"],"sourcesContent":["import api from './api';\nimport { REQUEST_URL } from '../../constants';\n\nexport const getMovieCredits = async id => {\n  const url = `${REQUEST_URL.MOVIE}/${id}/${REQUEST_URL.CREDITS}`;\n\n  try {\n    const response = await api.get(url);\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  padding: ${({ theme }) => theme.space[4]}px;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: ${({ theme }) => theme.space[4]}px;\n  list-style: none;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.div`\n  padding: ${({ theme }) => theme.space[4]}px;\n  display: flex;\n  flex-wrap: nowrap;\n  gap: ${({ theme }) => theme.space[4]}px;\n  box-shadow: ${({ theme }) => theme.shadows[2]};\n  border-radius: ${({ theme }) => theme.radii.normal};\n`;\n\nexport const Profile = styled.img`\n  width: 100px;\n  height: 150px;\n  object-fit: cover;\n  border-radius: ${({ theme }) => theme.radii.normal};\n`;\n\nexport const Title = styled.h2`\n  font-size: ${({ theme }) => theme.fontSizes.m};\n  font-style: normal;\n`;\n\nexport const Description = styled.div`\n  font-size: ${({ theme }) => theme.fontSizes.xs};\n  font-style: italic;\n  color: black;\n`;\n","import imageNotFound from 'images/image-not-found.png';\nimport { Item, Description, Profile, Title } from './CastItem.styled';\nimport { IMAGE_URL } from '../../constants';\nimport PropTypes from 'prop-types';\n\nconst CastItem = ({ profilePath, name, character }) => {\n  const profile = profilePath ? `${IMAGE_URL}${profilePath}` : imageNotFound;\n\n  return (\n    <Item>\n      <Profile src={profile} alt={name} />\n      <Description>\n        <Title>{name}</Title>\n        <p>Character: {character}</p>\n      </Description>\n    </Item>\n  );\n};\n\nexport default CastItem;\n\nCastItem.propTypes = {\n  character: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  profilePath: PropTypes.string,\n};\n","import { useEffect, useState } from 'react';\nimport { getMovieCredits } from '../../utils/api/getMovieCredits';\nimport { useParams } from 'react-router-dom';\nimport { CastList } from './Cast.styled';\nimport CastItem from '../CastItem';\nimport getMessageType from '../../utils/getMessageType';\nimport Loader from '../Loader';\nimport Message from '../Message';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    (async () => {\n      try {\n        const data = await getMovieCredits(movieId);\n        setCast(data.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n\n    return () => {\n      setError(null);\n      setCast([]);\n    };\n  }, [movieId]);\n\n  const params = {\n    hasError: error,\n    hasResults: cast.length > 0,\n  };\n  const messageType = getMessageType(params);\n\n  return (\n    <div>\n      {cast.length > 0 && (\n        <CastList>\n          {cast.map(item => (\n            <li key={item.id}>\n              <CastItem\n                profilePath={item['profile_path']}\n                name={item.name}\n                character={item.character}\n              />\n            </li>\n          ))}\n        </CastList>\n      )}\n\n      {isLoading && <Loader />}\n\n      {!isLoading && messageType && <Message type={messageType} />}\n    </div>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: ${({ theme }) => theme.space[5]}px;\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n  font-size: 24px;\n`;\n\nexport const Image = styled.img`\n  max-width: 200px;\n`;\n","import { Container, Text, Image } from './Message.styled';\nimport PropTypes from 'prop-types';\nimport emptyQuery from 'images/empty-query.png';\nimport error from 'images/error.png';\nimport noResults from 'images/no-results.png';\n\nconst messageDescription = {\n  emptyQuery: {\n    text: 'Type to search something',\n    image: emptyQuery,\n  },\n  error: {\n    text: 'Something went wrong. Try again later',\n    image: error,\n  },\n  noResults: {\n    text: 'Nothing to see here',\n    image: noResults,\n  },\n};\n\nconst Message = ({ type }) => {\n  const message = messageDescription[type];\n\n  return (\n    <Container>\n      <Text>{message.text}</Text>\n      <Image src={message.image} alt={message.text} />\n    </Container>\n  );\n};\n\nexport default Message;\n\nMessage.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n","import { MESSAGE_TYPES } from '../constants';\n\nconst getMessageType = ({ hasError, hasResults, hasSearchQuery = true }) => {\n  if (hasError) {\n    return MESSAGE_TYPES.ERROR;\n  }\n  if (!hasResults && !hasSearchQuery) {\n    return MESSAGE_TYPES.EMPTY_QUERY;\n  }\n  if (!hasResults && hasSearchQuery) {\n    return MESSAGE_TYPES.NO_RESULTS;\n  }\n  return null;\n};\n\nexport default getMessageType;\n"],"names":["getMovieCredits","id","url","REQUEST_URL","api","response","data","CastList","styled","theme","space","Item","shadows","radii","normal","Profile","Title","fontSizes","m","Description","xs","profilePath","name","character","profile","IMAGE_URL","imageNotFound","src","alt","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","error","setError","useEffect","params","hasError","hasResults","length","messageType","getMessageType","map","item","Loader","Message","type","Container","Text","fontWeights","bold","Image","messageDescription","emptyQuery","text","image","noResults","message","hasSearchQuery","MESSAGE_TYPES"],"sourceRoot":""}