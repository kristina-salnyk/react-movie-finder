{"version":3,"file":"static/js/697.bc36c646.chunk.js","mappings":"0LAEaA,EAAYC,EAAAA,GAAAA,IAAH,gHAIT,qBAAGC,MAAkBC,MAAM,EAA3B,IAGAC,EAAOH,EAAAA,GAAAA,EAAH,wFAEA,qBAAGC,MAAkBG,YAAYC,IAAjC,IAIJC,EAAQN,EAAAA,GAAAA,IAAH,6C,uCCTZO,EAAqB,CACzBC,WAAY,CACVC,KAAM,2BACNC,MAAOF,GAETG,MAAO,CACLF,KAAM,wCACNC,MAAOC,GAETC,UAAW,CACTH,KAAM,sBACNC,MAAOE,IAeX,EAXgB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACXC,EAAUP,EAAmBM,GAEnC,OACE,UAACd,EAAD,YACE,SAACI,EAAD,UAAOW,EAAQL,QACf,SAACH,EAAD,CAAOS,IAAKD,EAAQJ,MAAOM,IAAKF,EAAQL,SAG7C,C,0FC5BYQ,EAAOjB,EAAAA,GAAAA,GAAH,uKACJ,qBAAGC,MAAkBC,MAAM,EAA3B,IAGC,qBAAGD,MAAkBC,MAAM,EAA3B,IAIDgB,EAAWlB,EAAAA,GAAAA,GAAH,mEACL,qBAAGC,MAAkBkB,QAAQ,EAA7B,IACG,qBAAGlB,MAAkBmB,MAAMC,MAA3B,I,UCTNC,GAAOtB,EAAAA,EAAAA,IAAOuB,EAAAA,GAAPvB,CAAH,4HACJ,qBAAGC,MAAkBC,MAAM,EAA3B,IAGJ,qBAAGD,MAAkBC,MAAM,EAA3B,IAIIsB,EAASxB,EAAAA,GAAAA,IAAH,wGAIA,qBAAGC,MAAkBmB,MAAMC,MAA3B,IAGNI,EAAQzB,EAAAA,GAAAA,GAAH,kEACH,qBAAGC,MAAkByB,UAAUC,CAA/B,IAIFC,EAAc5B,EAAAA,GAAAA,IAAH,yHACT,qBAAGC,MAAkByB,UAAUG,EAA/B,IAKD,qBAAG5B,MAAkBC,MAAM,EAA3B,I,iDCFd,EApBkB,SAAC,GAAmD,IAAjD4B,EAAgD,EAAhDA,GAAIC,EAA4C,EAA5CA,WAAYC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC3CC,GAAmBC,EAAAA,EAAAA,KAAnBD,eACFE,GAAWC,EAAAA,EAAAA,MAEXC,EAASR,EAAU,UAAMS,EAAAA,IAAN,OAAkBT,GAAeU,EACpDC,EAAO,IAAIC,KAAKV,GAASW,cACzBC,EAASV,EAAeD,GAE9B,OACE,UAACZ,EAAD,CAAMwB,GAAE,kBAAahB,GAAMiB,MAAO,CAAEC,KAAMX,GAA1C,WACE,SAACb,EAAD,CAAQT,IAAKwB,EAAQvB,IAAKgB,KAC1B,UAACJ,EAAD,YACE,SAACH,EAAD,UAAQO,KACNiB,MAAMP,KAAS,kCAAUA,KACf,KAAXG,IAAiB,oCAAYA,UAIrC,ECHD,EAlBmB,SAAC,GAAe,IAAbK,EAAY,EAAZA,MACpB,OACE,SAACjC,EAAD,UACGiC,EAAMC,KAAI,SAAAC,GAAI,OACb,SAAClC,EAAD,WACE,SAAC,EAAD,CACEY,GAAIsB,EAAKtB,GACTC,WAAYqB,EAAI,YAChBpB,MAAOoB,EAAI,eACXnB,QAASmB,EAAI,aACblB,UAAWkB,EAAI,aANJA,EAAKtB,GADP,KAapB,C,4JClBYuB,EAAOrD,EAAAA,GAAAA,KAAH,iNAME,qBAAGC,MAAkBmB,MAAMC,MAA3B,IAKNiC,EAAStD,EAAAA,GAAAA,OAAH,oSAiBNuD,EAAcvD,EAAAA,GAAAA,KAAH,6MAYXwD,EAAQxD,EAAAA,GAAAA,MAAH,+P,mBCZlB,EA1BmB,SAAC,GAA+B,IAA7ByD,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAQjC,OACE,UAACL,EAAD,CAAMK,SARiB,SAAAC,GACvBA,EAAMC,iBAEN,IAAMH,EAAcE,EAAME,OAAOC,SAASL,YAAYM,MACtDL,EAASD,EACV,EAGC,WACE,UAACH,EAAD,CAAQzC,KAAK,SAAb,WACE,SAAC,MAAD,CAAcmD,KAAK,QACnB,SAACT,EAAD,yBAEF,SAACC,EAAD,CACE3C,KAAK,OACLoD,KAAK,cACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,aAAcZ,MAIrB,E,oBCzBYa,EAAiB,mCAAG,WAAMb,GAAN,gFACzBc,EAAS,CACbC,OAAQ,CACNC,MAAOhB,EACPiB,KAAMC,EAAAA,GAAAA,KACNC,cAAeD,EAAAA,GAAAA,eALY,kBAUNE,EAAAA,EAAAA,IAAQC,EAAAA,GAAAA,OAAoBP,GAVtB,cAUvBQ,EAVuB,yBAWtBA,EAASC,MAXa,yDAatB,MAbsB,yDAAH,sD,wCC+D9B,EAzDe,WAAO,IAAD,EACnB,GAA8CC,EAAAA,EAAAA,UAAS,IAAvD,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOtE,EAAP,KAAc2E,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMhC,EAAW,UAAG+B,EAAaE,IAAI,gBAApB,QAAgC,IAEjDC,EAAAA,EAAAA,YAAU,WACR,GAA2B,KAAvBlC,EAAYmC,OAehB,OAbAP,GAAa,IAEb,iBAAC,6GAEsBf,EAAkBb,GAFxC,OAESuB,EAFT,OAGGG,EAAmBH,EAAKa,SAH3B,gDAKGP,EAAS,EAAD,IALX,yBAOGD,GAAa,GAPhB,2EAAD,GAWO,WACLC,EAAS,MACTH,EAAmB,GACpB,CACF,GAAE,CAAC1B,IAEJ,IAKMe,EAAS,CACbsB,SAAUnF,EACVoF,WAAYb,EAAgBc,OAAS,EACrCC,eAAuC,KAAvBxC,EAAYmC,QAExBM,GAAcC,EAAAA,EAAAA,GAAe3B,GAEnC,OACE,gCACE,SAAC,EAAD,CAAYf,YAAaA,EAAaC,SAdnB,SAAAe,GAErBgB,EAD4B,KAAVhB,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAE/C,IAaIS,EAAgBc,OAAS,IACxB,SAACI,EAAA,EAAD,CAAYlD,MAAOgC,IAGpBE,IAAa,SAACiB,EAAA,EAAD,KAEZjB,GAAac,IAAe,SAACI,EAAA,EAAD,CAASzF,KAAMqF,MAGlD,C,qCCjDD,IAbuB,SAAC,GAAqD,IAAnDJ,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,WAAwC,IAA5BE,eAAAA,OAA4B,SAC1E,OAAIH,EACKS,EAAAA,GAAAA,MAEJR,GAAeE,GAGfF,GAAcE,EACVM,EAAAA,GAAAA,WAEF,KALEA,EAAAA,GAAAA,WAMV,C","sources":["components/Message/Message.styled.js","components/Message/Message.jsx","components/MoviesList/MoviesList.styled.js","components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","utils/api/getSearchingMovie.js","pages/Movies/Movies.jsx","utils/getMessageType.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: ${({ theme }) => theme.space[5]}px;\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n  font-size: 24px;\n`;\n\nexport const Image = styled.img`\n  max-width: 200px;\n`;\n","import { Container, Text, Image } from './Message.styled';\nimport PropTypes from 'prop-types';\nimport emptyQuery from 'images/empty-query.png';\nimport error from 'images/error.png';\nimport noResults from 'images/no-results.png';\n\nconst messageDescription = {\n  emptyQuery: {\n    text: 'Type to search something',\n    image: emptyQuery,\n  },\n  error: {\n    text: 'Something went wrong. Try again later',\n    image: error,\n  },\n  noResults: {\n    text: 'Nothing to see here',\n    image: noResults,\n  },\n};\n\nconst Message = ({ type }) => {\n  const message = messageDescription[type];\n\n  return (\n    <Container>\n      <Text>{message.text}</Text>\n      <Image src={message.image} alt={message.text} />\n    </Container>\n  );\n};\n\nexport default Message;\n\nMessage.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: ${({ theme }) => theme.space[4]}px;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  grid-gap: ${({ theme }) => theme.space[4]}px;\n  list-style: none;\n`;\n\nexport const ListItem = styled.li`\n  box-shadow: ${({ theme }) => theme.shadows[2]};\n  border-radius: ${({ theme }) => theme.radii.normal};\n`;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Link = styled(NavLink)`\n  padding: ${({ theme }) => theme.space[3]}px;\n  display: flex;\n  flex-wrap: nowrap;\n  gap: ${({ theme }) => theme.space[4]}px;\n  text-decoration: none;\n`;\n\nexport const Poster = styled.img`\n  width: 100px;\n  height: 150px;\n  object-fit: cover;\n  border-radius: ${({ theme }) => theme.radii.normal};\n`;\n\nexport const Title = styled.h2`\n  font-size: ${({ theme }) => theme.fontSizes.m};\n  font-style: normal;\n`;\n\nexport const Description = styled.div`\n  font-size: ${({ theme }) => theme.fontSizes.xs};\n  font-style: italic;\n  color: black;\n\n  > p {\n    margin: ${({ theme }) => theme.space[3]}px 0;\n  }\n`;\n","import { Description, Poster, Title, Link } from './MovieItem.styled';\nimport imageNotFound from 'images/image-not-found.png';\nimport { useGenres } from '../../contexts/GenresContext';\nimport { useLocation } from 'react-router-dom';\nimport { IMAGE_URL } from '../../constants';\nimport PropTypes from 'prop-types';\n\nconst MovieItem = ({ id, posterPath, title, release, genresIds }) => {\n  const { getGenresByIds } = useGenres();\n  const location = useLocation();\n\n  const poster = posterPath ? `${IMAGE_URL}${posterPath}` : imageNotFound;\n  const year = new Date(release).getFullYear();\n  const genres = getGenresByIds(genresIds);\n\n  return (\n    <Link to={`/movies/${id}`} state={{ from: location }}>\n      <Poster src={poster} alt={title} />\n      <Description>\n        <Title>{title}</Title>\n        {!isNaN(year) && <p>Year: {year}</p>}\n        {genres !== '' && <p>Genres: {genres}</p>}\n      </Description>\n    </Link>\n  );\n};\n\nexport default MovieItem;\n\nMovieItem.propTypes = {\n  genresIds: PropTypes.arrayOf(PropTypes.number),\n  id: PropTypes.number.isRequired,\n  posterPath: PropTypes.string,\n  release: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n","import { List, ListItem } from './MoviesList.styled';\nimport MovieItem from '../MovieItem';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ items }) => {\n  return (\n    <List>\n      {items.map(item => (\n        <ListItem key={item.id}>\n          <MovieItem\n            id={item.id}\n            posterPath={item['poster_path']}\n            title={item['original_title']}\n            release={item['release_date']}\n            genresIds={item['genre_ids']}\n          />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: ${({ theme }) => theme.radii.normal};\n  border: 1px solid lightgrey;\n  overflow: hidden;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const ButtonLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 18px;\n  border: none;\n  outline: none;\n  padding-left: 10px;\n  padding-right: 10px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 16px;\n  }\n`;\n","import { Form, Button, ButtonLabel, Input } from './SearchForm.styled';\nimport { BiSearchAlt2 } from 'react-icons/bi';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({ searchQuery, onSubmit }) => {\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    const searchQuery = event.target.elements.searchQuery.value;\n    onSubmit(searchQuery);\n  };\n\n  return (\n    <Form onSubmit={handleFormSubmit}>\n      <Button type=\"submit\">\n        <BiSearchAlt2 size=\"20\" />\n        <ButtonLabel>Search</ButtonLabel>\n      </Button>\n      <Input\n        type=\"text\"\n        name=\"searchQuery\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie\"\n        defaultValue={searchQuery}\n      />\n    </Form>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  searchQuery: PropTypes.string.isRequired,\n};\n","import api from './api';\nimport { REQUEST_URL, REQUEST_CONFIGS } from '../../constants';\n\nexport const getSearchingMovie = async searchQuery => {\n  const config = {\n    params: {\n      query: searchQuery,\n      page: REQUEST_CONFIGS.page,\n      include_adult: REQUEST_CONFIGS.includeAdult,\n    },\n  };\n\n  try {\n    const response = await api.get(REQUEST_URL.SEARCH, config);\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchForm from '../../components/SearchForm';\nimport { getSearchingMovie } from '../../utils/api/getSearchingMovie';\nimport MoviesList from '../../components/MoviesList';\nimport Loader from '../../components/Loader';\nimport Message from '../../components/Message';\nimport getMessageType from '../../utils/getMessageType';\n\nconst Movies = () => {\n  const [searchingMovies, setSearchingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (searchQuery.trim() === '') return;\n\n    setIsLoading(true);\n\n    (async () => {\n      try {\n        const data = await getSearchingMovie(searchQuery);\n        setSearchingMovies(data.results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n\n    return () => {\n      setError(null);\n      setSearchingMovies([]);\n    };\n  }, [searchQuery]);\n\n  const setSearchQuery = query => {\n    const newParams = query !== '' ? { query } : {};\n    setSearchParams(newParams);\n  };\n\n  const params = {\n    hasError: error,\n    hasResults: searchingMovies.length > 0,\n    hasSearchQuery: searchQuery.trim() !== '',\n  };\n  const messageType = getMessageType(params);\n\n  return (\n    <section>\n      <SearchForm searchQuery={searchQuery} onSubmit={setSearchQuery} />\n\n      {searchingMovies.length > 0 && (\n        <MoviesList items={searchingMovies}></MoviesList>\n      )}\n\n      {isLoading && <Loader />}\n\n      {!isLoading && messageType && <Message type={messageType} />}\n    </section>\n  );\n};\n\nexport default Movies;\n","import { MESSAGE_TYPES } from '../constants';\n\nconst getMessageType = ({ hasError, hasResults, hasSearchQuery = true }) => {\n  if (hasError) {\n    return MESSAGE_TYPES.ERROR;\n  }\n  if (!hasResults && !hasSearchQuery) {\n    return MESSAGE_TYPES.EMPTY_QUERY;\n  }\n  if (!hasResults && hasSearchQuery) {\n    return MESSAGE_TYPES.NO_RESULTS;\n  }\n  return null;\n};\n\nexport default getMessageType;\n"],"names":["Container","styled","theme","space","Text","fontWeights","bold","Image","messageDescription","emptyQuery","text","image","error","noResults","type","message","src","alt","List","ListItem","shadows","radii","normal","Link","NavLink","Poster","Title","fontSizes","m","Description","xs","id","posterPath","title","release","genresIds","getGenresByIds","useGenres","location","useLocation","poster","IMAGE_URL","imageNotFound","year","Date","getFullYear","genres","to","state","from","isNaN","items","map","item","Form","Button","ButtonLabel","Input","searchQuery","onSubmit","event","preventDefault","target","elements","value","size","name","autoComplete","autoFocus","placeholder","defaultValue","getSearchingMovie","config","params","query","page","REQUEST_CONFIGS","include_adult","api","REQUEST_URL","response","data","useState","searchingMovies","setSearchingMovies","isLoading","setIsLoading","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","trim","results","hasError","hasResults","length","hasSearchQuery","messageType","getMessageType","MoviesList","Loader","Message","MESSAGE_TYPES"],"sourceRoot":""}