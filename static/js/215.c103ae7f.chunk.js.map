{"version":3,"file":"static/js/215.c103ae7f.chunk.js","mappings":"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","sources":["components/Message/Message.styled.js","components/Message/Message.jsx","utils/api/getMovieReviews.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","utils/getMessageType.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: ${({ theme }) => theme.space[5]}px;\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n  font-size: 24px;\n`;\n\nexport const Image = styled.img`\n  max-width: 200px;\n`;\n","import { Container, Text, Image } from './Message.styled';\nimport PropTypes from 'prop-types';\nimport emptyQuery from 'images/empty-query.png';\nimport error from 'images/error.png';\nimport noResults from 'images/no-results.png';\n\nconst messageDescription = {\n  emptyQuery: {\n    text: 'Type to search something',\n    image: emptyQuery,\n  },\n  error: {\n    text: 'Something went wrong. Try again later',\n    image: error,\n  },\n  noResults: {\n    text: 'Nothing to see here',\n    image: noResults,\n  },\n};\n\nconst Message = ({ type }) => {\n  const message = messageDescription[type];\n\n  return (\n    <Container>\n      <Text>{message.text}</Text>\n      <Image src={message.image} alt={message.text} />\n    </Container>\n  );\n};\n\nexport default Message;\n\nMessage.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n","import api from './api';\nimport { REQUEST_URL } from '../../constants';\n\nexport const getMovieReviews = async id => {\n  const url = `${REQUEST_URL.MOVIE}/${id}/${REQUEST_URL.REVIEWS}`;\n\n  try {\n    const response = await api.get(url);\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n};\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  padding: ${({ theme }) => theme.space[4]}px;\n  display: grid;\n  grid-gap: ${({ theme }) => theme.space[4]}px;\n  list-style: none;\n`;\n\nexport const ReviewItem = styled.div`\n  padding: ${({ theme }) => theme.space[2]}px ${({ theme }) => theme.space[4]}px\n    ${({ theme }) => theme.space[4]}px;\n  box-shadow: ${({ theme }) => theme.shadows[2]};\n  border-radius: ${({ theme }) => theme.radii.normal};\n`;\n\nexport const Title = styled.h2`\n  font-size: ${({ theme }) => theme.fontSizes.m};\n  font-style: normal;\n`;\n\nexport const Description = styled.div`\n  font-size: ${({ theme }) => theme.fontSizes.xs};\n  font-style: italic;\n  color: ${({ theme }) => theme.colors.black};\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../../utils/api/getMovieReviews';\nimport { Description, ReviewItem, ReviewsList, Title } from './Reviews.styled';\nimport getMessageType from '../../utils/getMessageType';\nimport Loader from '../Loader';\nimport Message from '../Message';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    (async () => {\n      try {\n        const data = await getMovieReviews(movieId);\n        setReviews(data.results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n\n    return () => {\n      setError(null);\n      setReviews([]);\n    };\n  }, [movieId]);\n\n  const params = {\n    hasError: error,\n    hasResults: reviews.length > 0,\n  };\n  const messageType = getMessageType(params);\n\n  return (\n    <div>\n      {reviews.length > 0 && (\n        <ReviewsList>\n          {reviews.map(item => (\n            <li key={item.id}>\n              <ReviewItem>\n                <Title>Author: {item.author}</Title>\n                <Description>{item.content}</Description>\n              </ReviewItem>\n            </li>\n          ))}\n        </ReviewsList>\n      )}\n\n      {isLoading && <Loader />}\n\n      {!isLoading && messageType && <Message type={messageType} />}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import { MESSAGE_TYPES } from '../constants';\n\nconst getMessageType = ({ hasError, hasResults, hasSearchQuery = true }) => {\n  if (hasError) {\n    return MESSAGE_TYPES.ERROR;\n  }\n  if (!hasResults && !hasSearchQuery) {\n    return MESSAGE_TYPES.EMPTY_QUERY;\n  }\n  if (!hasResults && hasSearchQuery) {\n    return MESSAGE_TYPES.NO_RESULTS;\n  }\n  return null;\n};\n\nexport default getMessageType;\n"],"names":["Container","styled","theme","space","Text","fontWeights","bold","Image","messageDescription","emptyQuery","text","image","error","noResults","type","message","src","alt","getMovieReviews","id","url","REQUEST_URL","api","response","data","ReviewsList","ReviewItem","shadows","radii","normal","Title","fontSizes","m","Description","xs","colors","black","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","setError","useEffect","results","params","hasError","hasResults","length","messageType","getMessageType","map","item","author","content","Loader","Message","hasSearchQuery","MESSAGE_TYPES"],"sourceRoot":""}